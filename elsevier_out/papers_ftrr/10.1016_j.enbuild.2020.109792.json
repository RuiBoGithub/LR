{
  "full-text-retrieval-response": {
    "originalText": "Abstract\nModel Predictive Control for room temperature control in buildings is an effective approach to energy management in buildings. However, the development and maintenance of physical models may be a bottleneck for widespread real life application, especially for residential buildings. Data Predictive Control is an attempt to address this problem by learning the behaviour of the building from historical data and thus reducing the modelling effort. Here, we present an application of a Data Predictive Control approach, based on Random Forests with affine functions and convex optimization, to control the room temperature in a real life apartment. When compared to a conventional hysteresis controller, the applied approach saves 24.9% of cooling energy while reducing the integral of comfort constraint violations by 72.0% in a six-day experiment. A second experiment shows limitations when longer prediction horizons are needed. They are discussed together with directions of future work.\n\nMethods\n2 Methodology 2.1 Splitting of historical data We assume given a historical data set ( X, Y ) of measurements of a building. Y = { x ( k + 1 ) , … , x ( k + N ) } consists of measurements of room temperatures x . X = { u ( k ) , … , u ( k + N − 1 ) , d ( k − δ ) , … , d ( k + N − 1 ) , x ( k − δ ) , … , x ( k ) } consists of measurements of data that potentially has an influence on Y . These are control inputs u (e.g. cooling energy), disturbances d (e.g. ambient temperature and solar radiation forecasts, but also time of day variables) and autoregressive terms of the room temperature x. N denotes the prediction horizon for the predictive controller, δ denotes the number of autoregressive terms. We further split X in two separate sets X u = { u ( k ) , … , u ( k + N − 1 ) } , which includes all measured control inputs (all variables that can be influenced by the controller), and X d = { d ( k − δ ) , … , d ( k + N − 1 ) , x ( k − δ ) , … , x ( k ) } , which includes all measured disturbances and autoregressive terms of x (all variables that cannot be influenced by the controller). 2.2 Training of random forests We train N random forests to approximate the functions X d → Y j , in which j ∈ 1 , … , N denotes the columns of Y . 2 2 j ∈ 1 , … , N also denotes the steps in the prediction horizon as there is one forest for each step. Random forests are ensembles of regression trees - a form of decision tree to approximate continuous functions. A decision tree is built by splitting the input data X d into partitions p , yielding X d p , in each of which the output data Y j p is approximated with a constant value y ¯ j p (which is the mean of all elements of Y j p ). The splitting variable and splitting point is obtained with the help of a greedy heuristic: Consider a splitting variable v ∈ X d p and a splitting point s , the pair of half planes R defined by these are (1) R 1 ( v , s ) = { x ∈ X d p | v ≤ s } and R 2 ( v , s ) = { x ∈ X d p | v > s } . We seek the splitting variable v and splitting point s that solve (2) min v , s ( min y ¯ j R 1 ∑ x i ∈ R 1 ( v , s ) w i ( y i ( x i ) − y ¯ j R 1 ) 2 + min y ¯ j R 2 ∑ x i ∈ R 2 ( v , s ) w i ( y i ( x i ) − y ¯ j R 2 ) 2 ) by iterating over v and s . The variable w i can be used to apply sample-weighting techniques. If no sample weighting is applied its value is 1 for all x i . A random forest of T trees is built by bootstrapping [2] T subsets from ( X d , Y j ) and building a tree based on each subset. The function evaluation of the forest for one element (row) x d of X d is then done by evaluating each tree, giving rise to T different y ¯ j ( x d ) , and taking the average of these, giving rise to y ^ j ( x d ) . T is independent of N and needs to be chosen heuristically. For more details on the training process please refer to the original source [19] and to general literature on random forests (e.g. [11] ). 2.3 Fitting of affine functions for control inputs Each tree has a number of leaves l i , each based on a partition X d p of X d to approximate Y j p with a constant value y ¯ j p (as discussed before). For each set X d p there exists a corresponding set of measured control inputs X u p that has not been used in the model until here. [19] fit an affine model to approximate Y j p with X u p (to relate the response of the room temperature to the control inputs) with least squares in each leaf l i . For the prediction of the future temperature of a single room x ( k + j ) (which corresponds to y j ) in one leaf, this gives (3) x ( k + j ) = β j i , 0 + ∑ n = 1 j β j i , n u ( k + n − 1 ) + e in which β ji ,0 and β ji,n denote the fitted coefficients and e the model error. The temperature is therefore an affine function of all control inputs from the time instant k , when the forecast is made, to the forecasted time instant k+j . As each leaf l i is based on a different partition of X d , β ji ,0 and β ji,n are also different for each leaf. Preliminary results suggested that the proposed approach leads to weak prediction performance in the case of j > 3. This can be explained by the high dimensionality of the fitting process for bigger prediction steps in combination with a limited amount of samples of pairs ( x u , y j ) in each leaf l i . We therefore model the predicted temperature in the j th step as (4) x ( k + j ) = β j i , 0 + β j i , 1 ∑ n = 1 j u ( k + n − 1 ) + e , in which the dimension of β ji is reduced to 2 for all j . This approach is less realistic than eq. (3) , as u ( k ) will have the same effect on x ( k + j ) as u ( k + j − 1 ) has, whereas one would expect the effect of earlier time steps to be weaker. However, preliminary experiments suggested that the advantage of better model fits outweighs the disadvantage of a less realistic model. Moreover, the approach can still capture fast and slow dynamics, as fast dynamics will lead to non-zero β for small j whereas slow dynamics or lags will lead to β being zero. We can rewrite eq. (4) as (5) x ( k + j ) = β j i [ 1 , u ( k ) , … , u ( k + j − 1 ) ] T + e , with β ji being a row vector of dimension j + 1 . 3 3 The dimensions of β ji and u ( k ) , … , u ( k + j − 1 ) of course change if multiple rooms are considered because in that case also x ( k + j ) becomes a vector. In the case where random forests are used instead of regression trees, the average of all relevant β ji is taken, giving rise to β j . We note in passing that the variables y ¯ j ( x d ) and y ^ j ( x d ) are discarded after the training process. They only serve as a heuristic to find good splits in the regression trees as it is computationally intractable to do the splitting based on Eq. (4) . 2.4 MPC-like use of DPC model The learned β j can be used to perform conventional receding horizon MPC. The corresponding convex optimization scheme follows (6) minimize u , ϵ ∑ j = 0 N − 1 u k + j T R u k + j + λ ϵ k + j + 1 subject to x k + j = β j [ 1 , u ( k ) , … , u ( k + j − 1 ) ] T x m i n − ϵ k + j ≤ x k + j ≤ x m a x + ϵ k + j u ∈ U ϵ ≥ 0 j = 1 , … , N in which R and λ denote costs for control inputs and constraint violations, ϵ is a slack variable for the comfort constraint, x min and x max denote the comfort constraints and U defines the set of allowed control inputs. The algorithm for the online phase of the DPC controller is shown in Algorithm 1 . Note that formulation (6) would also allow the incorporation of variable COP of a chiller by adjusting R based on the weather forecast for example, or the inclusion of electrical reserve provision through robust optimization and affine policies as presented by [21] . In general, the model can be coupled to first-principles models of HVAC components.\n\nResults and Discussion\n4 Results and discussion 4.1 Comparison between DPC and hysteresis controller Fig. 3 shows the results for a six-day experiment from 2019-06-20 2.00 pm until 2019-06-26 2.00 pm in the apartment with a cooling demand. The bottom two graphs show the ambient conditions measured at the roof-top of the building. It can be seen that ambient temperatures between 13.7 and 39.5 ∘ C and solar radiations between 0 and 1310 W/m 2 (which is unrealistic due to the use of a non-calibrated sensor, but irrelevant as the used approach is data-driven) are present during the time of the experiment. The conditions allow a good estimation of the controller performance as the experiment covers the range from mild cooling on 06–22 with a maximum daily temperature of 22.7 ∘ C and heavy cooling (to the cooling system’s limit) at the end of the experiment with a maximum daily temperature of 39.5 ∘ C. The top graph of Fig. 3 shows the trajectory of the room temperatures (with a quantisation of 0.15 ∘ C) for the DPC-controlled room in blue, and the hysteresis-controlled room in dashed orange. The DPC comfort constraints are plotted in grey. First, it should be noted that the rooms indeed show very similar dynamics. For example, in the middle of day 06–24 (marked by the grey period ② in the figure), where cooling is switched off in both rooms and the constraint jumps to 25 ∘ C, the temperatures follow the same upwards trend. This observation is confirmed by the validation experiments in Appendix A . It can be seen that the DPC controller shows much less constraint violations than the hysteresis controller. More specifically, the integral of the constraint violations is 72.0% smaller in the DPC case. This is to be expected as the hysteresis controller has no predictive capabilities and only starts cooling once it hits a constraint. But it also shows that the prediction accuracy of the DPC-model is accurate enough to start cooling early during the day in order to not violate the upper comfort constraint during the night: The temperature trajectory in the DPC controlled room exactly meets the lowered temperature constraint at 8.00 pm on all days except 06–25. On the evening of 06–25 the constraint is not met because the cooling system operated at it’s maximum capacity with a maximum ambient temperature of 39.5 ∘ C on that particular day and an ambient temperature of still 34.6 ∘ C at 8.00 pm (grey period ④ in the figure). This issue could possibly addressed with a longer prediction horizon to allow pre-cooling. During night time, the temperature in the DPC-controlled room stays close to the upper constraint most of the time. This is desirable for a predictive controller in the cooling case because it minimizes the control input. The second graph of Fig. 3 shows the control input (relative between minimum cooling capacity of 0 and maximum of -0.6 kWh/h) during the experiment. It can be seen that the hysteresis controller uses much more cooling energy than the DPC-controller. This is partly due to always cooling until the room temperature is one degree below the upper comfort constraint. However, the average temperature in the DPC-controlled room is only 0.1 ∘ C above the hysteresis-controlled room, which is in the range of the quantisation error of the temperature sensor. This shows that the cooling energy savings are not due to a higher average room temperature. Of course, a lower hysteresis band would decrease the energy consumption of the hysteresis-controlled room. However, it would most likely also increase the comfort constraint violations and the frequency at which the valve opens and closes. Over the course of the whole experiment, the DPC-controller saved 24.9% cooling energy compared to the hysteresis controlled room, as can be seen in the middle graph that shows the relative integral of the control input. Both top graphs show two more areas with grey background. In the first period between 06–22 and 06–23 (marked by grey period ①) the controllers lost connection to the actuators multiple times, which caused the valves in the cooling system to open and close multiple times - thus the part load in the hysteresis controlled room. In the third period on 06–26 (marked by grey period ③), the windows were opened in both rooms for a period of 10 min. This automatically switches off cooling and together with an ambient temperature higher than the room temperature resulted in a slight increase in room temperature. 4.2 Limitations The presented results have shown that DPC has advantages in terms of energy consumption and comfort compared to a standard hysteresis controller commonly used in buildings. However, the approach also has limitations that need to be overcome in future research to make it competitive with advanced control methods, such as those based on first principles models and MPC. For example, Fig. B1 in Appendix B shows the results of an experiment where DPC controllers with a sampling time of 1h and a horizon of 6 h and 9 h (N=6 and N=9) respectively were compared. The controller with a 9 h horizon uses significantly more cooling energy than the controller with the 6 h horizon, because it starts cooling much earlier to meet the 8.00 pm constraint. This phenomenon is due to the dimensionality reduction performed from Eq. (3) to (4) , which causes the controller to overestimate the effect of early control inputs for large j . Longer prediction horizons for the same building dynamics might therefore not be feasible with the current DPC approach, as one would either have to base the training on Eq. (3) , leading to high dimensionality with limited amount of training data, or Eq. (4) , leading to overestimation of the effect of early control inputs. One can think of heuristics for overcoming this problem, for example using (4) but multiplying control input u ( j ) with an increasing function such as ( 1 − e − j ) to “devalue” early control inputs, but the effectiveness of these remains to be investigated. As a comparison: [20] use a prediction horizon of 58 h with a sampling time of 15 minutes, leading to N=232, to control a 6000 m 2 office building. Related difficulties arise if many different control inputs are coupled to single states, as this again increases the number of fitting variables in Eq. (3) or (4) . A coupling of rooms a and all neighbouring rooms b ∈ B a can in principled be established easily by replacing Eq. (4) by (7) x a ( k + j ) = β j i , 0 + β j i , 1 ∑ n = 1 j u a ( k + n − 1 ) + ∑ b ∈ B a β j i , b ∑ n = 1 j u b ( k + n − 1 ) + e However, the trade-off between computational complexity and the model prediction performance needs to be analysed. We therefore conclude that DPC as implemented here might not yet be suitable for commercial buildings or for other problems where long prediction horizons (in relation to the time constants of the dynamics of the system) are needed. To further investigate potentials and limitations of the approach, experiments with a heating case and control of the whole apartment as well as further comparisons to other types of controllers such as linear state space MPC, hysteresis with other bands, PI, and other data-driven approaches, are part of current and future research. This also includes an analysis of the modeling effort, computational scalability and CPU and memory footprint of DPC versus MPC for which we cannot make an informed statement at the current state of research.\n\nConclusion\n5 Conclusion Data Predictive Control in buildings constitutes an attempt to lower the effort for model development and maintenance for predictive thermal building control. Despite good simulation results there is no practical experience in real life cases for room temperature control between comfort constraints and minimization of cooling or heating input with such methods so far. Here, we apply a DPC approach based on Random Forests with affine functions and convex optimization to temperature control in a real life residential apartment and compare the controller to a conventional hysteresis controller. The temperature in the room controlled by DPC shows 72.0% less integrated comfort constraint violations than in the room controlled with hysteresis-control. Moreover, the DPC controller saves 24.9% of cooling energy. The experiment constitutes a promising first real life application of the algorithm and demonstrates that DPC might be well suited for the control of residential buildings. Experiments with a longer control horizons suggested that the applicability for commercial buildings might be limited at the current state. A comparison to other control approaches such as linear state space MPC as well as experiments regarding heating and control of the whole apartment are part of ongoing and future research.\n"
  }
}