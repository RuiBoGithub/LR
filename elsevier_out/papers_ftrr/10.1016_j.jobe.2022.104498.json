{
  "full-text-retrieval-response": {
    "originalText": "Abstract\nDistributed control is recognized as an effective means for improving energy efficiency of building heating, ventilation, and air conditioning (HVAC) systems. However, existing distributed control methods ignore the physical correlations between components and zones, resulting in heavy computation load for system-level control. This paper proposes a hierarchical architecture with multi layers to describe the tree-like structure of various HVAC systems. It divides the conventional big distributed optimization task into several local optimization tasks, according to the hierarchical structure from the top layer to the bottom layer. A hierarchical alternating direction multipliers method is presented to solve the overall optimization problem layer by layer in a recursive manner. An improved Nesterov acceleration technique is further introduced to improve the convergence rate. Two cases with different cooling load conditions are conducted on a simulated complex HVAC system to validate the performance of the proposed framework by comparing with three conventional control methods. Results show that it achieves a significant energy saving of 4.05% (275.95 kWh) in case 1 and 5.33% (554.99 kWh) in case 2 compared with the centralized control method. Moreover, it can reduce the computation time by 69.55% averagely in the two cases compared to the conventional distributed control method.\n\nMethods\n2 Methodology 2.1 Concepts of the MAS-based control A MAS can be regarded as a cyber control system of a HVAC system. In the MAS, each agent is a mapping of a component or zone in an actual HVAC system. At each decision-making process, these agents execute local optimization tasks individually based on the data from their sensors. The global optimization is realized through a coordination mechanism of the MAS. A typical MAS-based HVAC control system is as shown in Fig. 1 for instance. In the building automation system, a typical configuration of an agent mainly consists of four modules, i.e., a sensing module [ 21 ], a process module, a communication module, and an actuation module [ 14 ]. The sensing module, such as smart sensors, collects the information from its monitoring component or zone. The process module, such as a microprocessor, calculates a distributed optimization algorithm to optimize a local objective function of the corresponding component or zone. The communication module exchanges the information between agents for coordination. And the actuation module is responsible for executing the optimal control instructions. Within such MAS-based control frameworks, all the details of a component and a zone, such as performance parameters, and distributed optimization algorithms, are encapsulated in a corresponding agent. A control system can be constructed conveniently by configuring a communication network between agents [ 22 ]. It is easy to be reconfigured as the configuration of a building changes. 2.2 Schematic of the proposed distributed optimal control framework Conventional MAS-based distributed control frameworks adopt a master-slave architecture [ 23 ]. This kind of architecture treats all of components and served zones as equivalent, leading to heavy computation load and high computation complexity. In this paper, a general distributed optimal control framework adopting MAS is developed for HVAC systems. The schematic of the proposed framework is as shown in Fig. 2 . All agents are organized into multi layers according to the topology of the target HVAC system. Each layer has one or more agent groups. Each agent group consists of agents with similar functions, which are coordinated by agents of the upper layer. These agent groups can be divided repeatedly in a recursive manner. For each agent, they execute their own local optimization tasks and are coordinated by agents of the upper layer. At the same time, they are responsible for coordinating the agents of the lower layer. Compared with conventional master-slave-based multi agent architectures, this kind of architecture has more powerful description ability in the hierarchical relationships between components. Fig. 3 illustrates an instance for a typical building HVAC system. It is worth noting that the instance considered in this paper only consists of three layers for the purpose of simplification. The proposed framework can be generalized to arbitrary depth for suitable problems in a recursive manner. The MAS in Fig. 3 is divided into three layers, i.e., a system layer, a component layer and a zone layer, based on the hierarchical relationships between their corresponding components and zones. A coordinator agent in the system layer coordinates component agents to achieve the overall optimization objective. A component agent in the component layer optimizes a local objective to minimize the energy consumption of their corresponding components. It also coordinates zone agents to achieve a local optimization objective of a sub-system. A zone agent in the zone layer optimizes a local objective to maintain the thermal comfort level of occupants. 2.3 Hierarchical distributed solving process of the proposed framework In this paper, a hierarchical ADMM algorithm is presented to solve the optimization problem of HVAC systems in the proposed hierarchical framework. The solving process of the optimization problem can be described as two levels, i.e., an upper level, and a lower level. The upper level solves the optimization problem between the system layer and component layer. In the upper level, each component agent tries to achieve an optimization objective that minimizes the energy consumption of its corresponding component. The lower level solves the optimization problem between the component layer and zone layer. In the lower level, each zone agent tries to achieve an optimization objective that maximizes the thermal comfort level of its corresponding zone. The optimal solutions can be obtained through a series of iterations between different layers. The flow chart of the proposed distributed optimal control framework is shown in Fig. 4 . Details of the proposed hierarchical ADMM algorithm are as follows. 2.3.1 Centralized formulation of the optimization problem For a typical HVAC system, the optimization problem is often to find the optimal set-points of control variables in order to minimize the energy consumption of HVAC systems, and maintain the thermal comfort level of the served zones [ 24 ]. The optimization problem in the centralized form is as shown in Eq. (1) . And the constraints between components are shown in Eq. (2) . (1) min x w , m , x a , i , x a , i , j J = ∑ m = 1 N w P m ( x w , m ) + ∑ i = 1 N a M i ( x a , i ) (2) s . t . ∑ m = 1 N w A m x w , m + ∑ i = 1 N a B i x a , i = c where, x w,m is the control variable of the m th water-side component, x a,i is the control variable of the i th air-side component, N w is the number of control variables of water-side components, N a is the number of control variables of air-side components, P is the energy consumption of components, and M i is the optimization objective of the i th air-side component. It has two parts: minimizing the energy consumption of the i th air-side component, and maintaining the thermal comfort level of its served zones. The expression of M i is shown in Eq. (3) , and the constraints between zones are shown in Eq. (4) . (3) M i ( x a , i ) = P i ( x a , i ) + ω ∑ j = 1 N z o n e , i C z o n e , i , j ( x a , i , j ) (4) s . t . ∑ j = 1 N z o n e , i a i j x a , i , j + x a , i = c where, x a,i,j is the control variable of the j th zone served by i th air-side component, N zone,i is the number of control variables of zones related to i th air-side component, C zone,i,j is the occupants' thermal comfort level of the j th zone served by the i th air-side component, and ω is a weighting factor of the occupants' thermal comfort level. 2.3.2 Distributed optimization of the upper level In the upper level, the optimization objective is to minimize the energy consumption of the entire HVAC system while satisfying the constraints between components, i.e., Eqs. (1) and (2) . To decompose the overall optimization objective of the upper level, ADMM is used to formulate the local control objective of each agent and coordination mechanism between agents. By adopting ADMM, an augmented Lagrangian term is added to Eq. (1) in order to eliminate coupling constraints. It is expressed by Eq. (5) . (5) min x w , m , x a , i , x a , i , j L ( x w , m , x a , i , x a , i , j ; λ , ρ ) = ∑ m = 1 N w P m ( x w , m ) + ∑ i = 1 N a M i ( x a , i ) + ρ 2 ‖ ∑ m = 1 N w A m x w , m + ∑ i = 1 N a B i x a , i − c + λ ρ ‖ 2 2 where, λ is the vector of Lagrangian multipliers, and ρ is the penalty factor which is greater than 0. Eq. (5) can be assigned to each component agent for local optimization. The local optimization task of water-side and air-side component agents is expressed by Eqs. (6) and (7) , respectively. To ensure the satisfaction of coupling constraints, a coordinator agent is used to update the Lagrangian multipliers based on Eq. (8) . Global optimal solutions can be achieved through a series of iterations of Eq. (6) -(8). (6) x w , m k + 1 = arg min x w , m P m ( x w , m ) + ρ u 2 ‖ ∑ n = 1 n ≠ m N w A n x w , n k + A m x w , m + ∑ n = 1 N a B n x a , n k − c + λ u k ρ u ‖ 2 2 (7) x a , i k + 1 = arg min x a , i M i ( x a , i ) + ρ u 2 ‖ ∑ n = 1 N w A n x w , n k + ∑ n = 1 n ≠ i N a B n x a , n k + B i y i − c + λ u k ρ u ‖ 2 2 (8) λ u k + 1 = λ u k + ρ u ( c − ∑ m = 1 N w A m x w , m k + 1 + ∑ i = 1 N a B i x a , i k + 1 ) where, subscript u represents the upper level, and ρ u is the penalty factor in the upper level. It can be observed that the update of x a,i is determined based on M i . The value of M i is dependent on the control variables x a,i and x a,i,j , as shown in Eq. (3) . The distributed optimization of M i is realized in the lower level. Conventional ADMM algorithms suffer from the issue of low convergence rate, especially for high-dimensional optimization problems [ 25 , 26 ]. In order to improve the convergence rate, this study introduces an improved Nesterov acceleration technique to improve the performance of ADMM. It adopts a momentum-like update rule, which utilizes the gradient information of the previous step [ 27 ] compared with conventional gradient descent methods. Two steps are mainly included for applying Nesterov acceleration. Firstly, each component agent optimizes its control variable based on Eqs. (9) and (10) , and the coordinator agent updates the Lagrange multipliers based on Eq. (11) . Where, λ ˆ k + 1 is the accelerated value of λ k + 1 , and x ˆ n k + 1 is the accelerated value of x n k + 1 . It is worth noting that it is accelerated terms, i.e., λ ˆ k + 1 and x ˆ n k + 1 , rather than terms without acceleration, i.e., λ k + 1 and x n k + 1 , are used for parameter updates. (9) x w , m k + 1 = arg min x w , m P m ( x w , m ) + ρ u 2 ‖ ∑ n = 1 n ≠ m N w A n x ˆ w , n k + A m x w , m + ∑ n = 1 N a B n x ˆ a , n k − c + λ ˆ u k ρ u ‖ 2 2 (10) x a , i k + 1 = arg min x a , i M i ( x a , i ) + ρ u 2 ‖ ∑ n = 1 N w A n x ˆ w , n k + ∑ n = 1 n ≠ i N a B n x ˆ a , n k + B i y i − c + λ ˆ u k ρ u ‖ 2 2 (11) λ u k + 1 = λ ˆ u k + ρ u ( c − ∑ m = 1 N w A m x w , m k + 1 + ∑ i = 1 N a B i x a , i k + 1 ) Secondly, the component agents and coordinator agent update the accelerated versions of each control variable and Lagrange multipliers according to Eqs. (12) and (13) . (12) x ˆ k + 1 = x k + 1 + η α k − 1 α k + 1 ( x k + 1 − x k ) (13) λ ˆ k + 1 = λ k + 1 + η α k − 1 α α k + 1 ( λ k + 1 − λ k ) where, α k is the Nesterov sequence, as expressed by Eq. (14) , and η is the adaptive coefficient introduced in this paper to attenuate the local oscillation in later stages of the search process. It uses a linear function to adjust the weight of acceleration operations, as shown in Eq. (15) . Where, τ is the preset constant which can be determined based on trial-and-error. (14) α 1 = 1 , α k + 1 = 1 + 1 + 4 α k 2 2 (15) η = { 1 − τ k , i f k < 1 τ 0 , e l s e 2.3.3 Distributed optimization of the lower level In the lower level, the optimization objective is to minimize the energy consumption of air-side components, and maintain the thermal comfort level of occupants, i.e., Eqs. (3) and (4) . The lower level aims to optimize Eq. (3) in a distributed manner. By adopting ADMM with improved Nesterov acceleration recursively, Eq. (3) is reformulated into Eq. (10) and assigned to individual agents. The local optimization task of air-side component agents and zone agents is expressed by Eqs. (16) and (17) , respectively. And the Lagrangian multipliers λ l is updated based on Eq. (18) . Expressions of the accelerated values are not given again for brevity. They have a similar form with Eqs. 12–15 . (16) x a , i k + 1 = arg min x a , i h ( x a , i ) + ρ l 2 ‖ ∑ n = 1 N z o n e , i a i n x ˆ a , i , n k + x a , i − c + λ ˆ l k ρ l ‖ 2 2 (17) x a , i , j k + 1 = arg min x a , i , j C z o n e , i , j ( x a , i , j ) + ρ l 2 ‖ ∑ n = 1 n ≠ j N z o n e , i a i n x ˆ a , i , n k + a i j x a , i , j + x ˆ a , i k − c + λ ˆ l k ρ l ‖ 2 2 (18) λ l k + 1 = λ ˆ l k + ρ l ( c − x a , i k + 1 − ∑ j = 1 N z o n e , i a i j x a , i , j k + 1 ) where, subscript l represents the lower level, and ρ l is the penalty factor of the lower level. For the sake of clarity, a function h is defined as the sum of the energy consumption of the i th air-side component and quadratic penalty term of constraints, as expressed by Eq. (19) . (19) h ( x a , i ) = P i ( x a , i ) + ρ u 2 ‖ ∑ n = 1 n ≠ i N w A n x ˆ w , n k + A i x w , i + ∑ n = 1 N a B n x ˆ a , n k − c + λ ˆ u k ρ u ‖ 2 2 2.3.4 Global optimization process of the hierarchical ADMM algorithm Some assumptions are needed to ensure global optimization capacity [ 28 ]: 1) all of the P m (·) and M i (·) must be convex functions; 2) all of the constraints must be linear. The two consumptions can be satisfied by choosing appropriate models and relaxing nonlinear constraints into linear forms, respectively. They are discussed in detail in Section 3.2 . The optimization process of the proposed hierarchical ADMM algorithm comprises of a series of local optimization task and Lagrange multipliers update between two levels. In the lower level, zone agents optimize x a,i,j to maintain the occupants’ thermal comfort level of their corresponding zones, and air-side component agents optimize x a,i to minimize the energy consumption of their corresponding air-side components. The optimized values of x a,i,j are sent to air-side component agents for the updates of λ l until the lower convergence reaches. In the upper level, water-side component agents optimize x w,m to minimize the energy consumption of their corresponding water-side component. The optimized values of x w,m and x a,i are sent to the coordinator agent for the update of λ u . The iteration process repeats until the upper convergence is reached. The pseudocode of the hierarchical ADMM algorithm with the improved Nesterov acceleration is shown in Algorithm 1 . Where, M u and M l are the numbers of max iterations in the upper level and lower level, respectively. The proposed hierarchical ADMM algorithm can be simply generalized to deeper hierarchy by recursive call of the ADMM algorithm. For performance reasons, no more than four layers are recommended. Algorithm 1 Pseudocode of the hierarchical ADMM algorithm utilized in the proposed distributed optimal control framework Image 1 2.4 Definition of agents for the proposed framework In conventional distributed optimal control framework adopting MAS, agents are defined based on the optimization procedure of distributed optimization algorithms with master-slave structures. They cannot be utilized in the proposed hierarchical optimization framework. In this paper, three types of agents, i.e., the coordinator agent, component agent, and zone agent, are defined to realize the distributed control of HVAC systems. 2.4.1 Coordinator agent The coordinator agent is designed as a coordinator of component agents to ensure the satisfactions of constraints among components during the iteration process. It has three major functions: convergence judgment, Lagrangian multipliers update, and Lagrangian multipliers acceleration. At each iteration, it firstly judges whether the algorithm has achieved the global convergence based on the optimized values from component agents. In this study, the primal residual and dual residual are adopted as stopping criterions [ 29 ]. The primal residual reflects the degree of constraints satisfaction, as shown in Eq. (20) . And the dual residual reflects the rate of relative changes between two iterations for each control variable, as shown in Eq. (21) . (20) ‖ ∑ m = 1 N w A m x w , m k + 1 + ∑ i = 1 N a B i x a , i k + 1 − c ‖ 2 2 ≤ ε u p r i (21) ‖ x w , m k + 1 − x w , m k x w , m k ‖ 1 ≤ ε u d u a l where, ε u p r i is the threshold of the primal residual reflecting the maximum tolerance of ADMM to the deviation of constraints among components, and ε u d u a l is the threshold of the dual residual reflecting the maximum relative difference between two iterations of each control variable. If the convergence criterions are satisfied, the coordinator agent stops the iteration process and the optimal solutions are obtained. Otherwise, the coordinator agent updates λ u , as shown in Eq. (11) . After the update of λ u , it calculates the accelerated values λ ˆ u based on Eqs. 13–15 . The updated values are sent to each component agent for local optimization at the next iteration. 2.4.2 Component agent The component agent has two main functions. The first function is to execute the local optimization of the corresponding component. At each iteration, each component agent firstly optimizes x w,m and x a,i based on the information from the coordinator agent and other component agents to minimize the energy consumption of the corresponding component, as shown in Eqs. (9) and (10) . The energy consumption of a component can be predicted by the simplified component model. Then, it calculates the accelerated values x ˆ w , m and x ˆ a , i according to Eqs. (12), (14) and (15) . The values of x ˆ w , m and x ˆ a , i are sent to the coordinator agent to update λ u in the upper level. The second function is to coordinate the zone agents to ensure the satisfaction of constraints among the corresponding component and zones. Similar to the functions of a coordinator agent, a component agent firstly checks whether the convergence in the lower level has been reached based on Eqs. 22–24 . (22) ‖ ∑ j = 1 N z o n e , i a i j x a , i , j + x a , i − c ‖ 2 2 ≤ ε l p r i (23) ‖ x a , i k + 1 − x a , i k x a , i k ‖ 1 ≤ ε l d u a l (24) ‖ x a , i , j k + 1 − x a , i , j k x a , i , j k ‖ 1 ≤ ε l d u a l If the convergence criterions are met, the iteration process stops and the optimal values of x a , i and x ˆ a , i in the lower level are sent to the coordinator agent for global coordination. If not, the component agent updates λ l and λ ˆ l , respectively. Then, they are sent to zone agents for local optimization. 2.4.3 Zone agent The zone agent is designed as a local optimizer of the corresponding zone to maintain the thermal comfort level of occupants. It can be predicted by a steady-state model [ 14 ] or a dynamic model [ 30 ]. At each iteration, a zone agent optimizes x a,i,j based on the information from the corresponding component agent and other zone agents, as shown in Eq. (17) . Then, it calculates the accelerated value x ˆ a , i , j . The values of x a,i,j and x ˆ a , i , j are sent to the component agent for coordination in the lower level.\n\nMethods\n2.2 Schematic of the proposed distributed optimal control framework Conventional MAS-based distributed control frameworks adopt a master-slave architecture [ 23 ]. This kind of architecture treats all of components and served zones as equivalent, leading to heavy computation load and high computation complexity. In this paper, a general distributed optimal control framework adopting MAS is developed for HVAC systems. The schematic of the proposed framework is as shown in Fig. 2 . All agents are organized into multi layers according to the topology of the target HVAC system. Each layer has one or more agent groups. Each agent group consists of agents with similar functions, which are coordinated by agents of the upper layer. These agent groups can be divided repeatedly in a recursive manner. For each agent, they execute their own local optimization tasks and are coordinated by agents of the upper layer. At the same time, they are responsible for coordinating the agents of the lower layer. Compared with conventional master-slave-based multi agent architectures, this kind of architecture has more powerful description ability in the hierarchical relationships between components. Fig. 3 illustrates an instance for a typical building HVAC system. It is worth noting that the instance considered in this paper only consists of three layers for the purpose of simplification. The proposed framework can be generalized to arbitrary depth for suitable problems in a recursive manner. The MAS in Fig. 3 is divided into three layers, i.e., a system layer, a component layer and a zone layer, based on the hierarchical relationships between their corresponding components and zones. A coordinator agent in the system layer coordinates component agents to achieve the overall optimization objective. A component agent in the component layer optimizes a local objective to minimize the energy consumption of their corresponding components. It also coordinates zone agents to achieve a local optimization objective of a sub-system. A zone agent in the zone layer optimizes a local objective to maintain the thermal comfort level of occupants.\n\nMethods\n2.3 Hierarchical distributed solving process of the proposed framework In this paper, a hierarchical ADMM algorithm is presented to solve the optimization problem of HVAC systems in the proposed hierarchical framework. The solving process of the optimization problem can be described as two levels, i.e., an upper level, and a lower level. The upper level solves the optimization problem between the system layer and component layer. In the upper level, each component agent tries to achieve an optimization objective that minimizes the energy consumption of its corresponding component. The lower level solves the optimization problem between the component layer and zone layer. In the lower level, each zone agent tries to achieve an optimization objective that maximizes the thermal comfort level of its corresponding zone. The optimal solutions can be obtained through a series of iterations between different layers. The flow chart of the proposed distributed optimal control framework is shown in Fig. 4 . Details of the proposed hierarchical ADMM algorithm are as follows. 2.3.1 Centralized formulation of the optimization problem For a typical HVAC system, the optimization problem is often to find the optimal set-points of control variables in order to minimize the energy consumption of HVAC systems, and maintain the thermal comfort level of the served zones [ 24 ]. The optimization problem in the centralized form is as shown in Eq. (1) . And the constraints between components are shown in Eq. (2) . (1) min x w , m , x a , i , x a , i , j J = ∑ m = 1 N w P m ( x w , m ) + ∑ i = 1 N a M i ( x a , i ) (2) s . t . ∑ m = 1 N w A m x w , m + ∑ i = 1 N a B i x a , i = c where, x w,m is the control variable of the m th water-side component, x a,i is the control variable of the i th air-side component, N w is the number of control variables of water-side components, N a is the number of control variables of air-side components, P is the energy consumption of components, and M i is the optimization objective of the i th air-side component. It has two parts: minimizing the energy consumption of the i th air-side component, and maintaining the thermal comfort level of its served zones. The expression of M i is shown in Eq. (3) , and the constraints between zones are shown in Eq. (4) . (3) M i ( x a , i ) = P i ( x a , i ) + ω ∑ j = 1 N z o n e , i C z o n e , i , j ( x a , i , j ) (4) s . t . ∑ j = 1 N z o n e , i a i j x a , i , j + x a , i = c where, x a,i,j is the control variable of the j th zone served by i th air-side component, N zone,i is the number of control variables of zones related to i th air-side component, C zone,i,j is the occupants' thermal comfort level of the j th zone served by the i th air-side component, and ω is a weighting factor of the occupants' thermal comfort level. 2.3.2 Distributed optimization of the upper level In the upper level, the optimization objective is to minimize the energy consumption of the entire HVAC system while satisfying the constraints between components, i.e., Eqs. (1) and (2) . To decompose the overall optimization objective of the upper level, ADMM is used to formulate the local control objective of each agent and coordination mechanism between agents. By adopting ADMM, an augmented Lagrangian term is added to Eq. (1) in order to eliminate coupling constraints. It is expressed by Eq. (5) . (5) min x w , m , x a , i , x a , i , j L ( x w , m , x a , i , x a , i , j ; λ , ρ ) = ∑ m = 1 N w P m ( x w , m ) + ∑ i = 1 N a M i ( x a , i ) + ρ 2 ‖ ∑ m = 1 N w A m x w , m + ∑ i = 1 N a B i x a , i − c + λ ρ ‖ 2 2 where, λ is the vector of Lagrangian multipliers, and ρ is the penalty factor which is greater than 0. Eq. (5) can be assigned to each component agent for local optimization. The local optimization task of water-side and air-side component agents is expressed by Eqs. (6) and (7) , respectively. To ensure the satisfaction of coupling constraints, a coordinator agent is used to update the Lagrangian multipliers based on Eq. (8) . Global optimal solutions can be achieved through a series of iterations of Eq. (6) -(8). (6) x w , m k + 1 = arg min x w , m P m ( x w , m ) + ρ u 2 ‖ ∑ n = 1 n ≠ m N w A n x w , n k + A m x w , m + ∑ n = 1 N a B n x a , n k − c + λ u k ρ u ‖ 2 2 (7) x a , i k + 1 = arg min x a , i M i ( x a , i ) + ρ u 2 ‖ ∑ n = 1 N w A n x w , n k + ∑ n = 1 n ≠ i N a B n x a , n k + B i y i − c + λ u k ρ u ‖ 2 2 (8) λ u k + 1 = λ u k + ρ u ( c − ∑ m = 1 N w A m x w , m k + 1 + ∑ i = 1 N a B i x a , i k + 1 ) where, subscript u represents the upper level, and ρ u is the penalty factor in the upper level. It can be observed that the update of x a,i is determined based on M i . The value of M i is dependent on the control variables x a,i and x a,i,j , as shown in Eq. (3) . The distributed optimization of M i is realized in the lower level. Conventional ADMM algorithms suffer from the issue of low convergence rate, especially for high-dimensional optimization problems [ 25 , 26 ]. In order to improve the convergence rate, this study introduces an improved Nesterov acceleration technique to improve the performance of ADMM. It adopts a momentum-like update rule, which utilizes the gradient information of the previous step [ 27 ] compared with conventional gradient descent methods. Two steps are mainly included for applying Nesterov acceleration. Firstly, each component agent optimizes its control variable based on Eqs. (9) and (10) , and the coordinator agent updates the Lagrange multipliers based on Eq. (11) . Where, λ ˆ k + 1 is the accelerated value of λ k + 1 , and x ˆ n k + 1 is the accelerated value of x n k + 1 . It is worth noting that it is accelerated terms, i.e., λ ˆ k + 1 and x ˆ n k + 1 , rather than terms without acceleration, i.e., λ k + 1 and x n k + 1 , are used for parameter updates. (9) x w , m k + 1 = arg min x w , m P m ( x w , m ) + ρ u 2 ‖ ∑ n = 1 n ≠ m N w A n x ˆ w , n k + A m x w , m + ∑ n = 1 N a B n x ˆ a , n k − c + λ ˆ u k ρ u ‖ 2 2 (10) x a , i k + 1 = arg min x a , i M i ( x a , i ) + ρ u 2 ‖ ∑ n = 1 N w A n x ˆ w , n k + ∑ n = 1 n ≠ i N a B n x ˆ a , n k + B i y i − c + λ ˆ u k ρ u ‖ 2 2 (11) λ u k + 1 = λ ˆ u k + ρ u ( c − ∑ m = 1 N w A m x w , m k + 1 + ∑ i = 1 N a B i x a , i k + 1 ) Secondly, the component agents and coordinator agent update the accelerated versions of each control variable and Lagrange multipliers according to Eqs. (12) and (13) . (12) x ˆ k + 1 = x k + 1 + η α k − 1 α k + 1 ( x k + 1 − x k ) (13) λ ˆ k + 1 = λ k + 1 + η α k − 1 α α k + 1 ( λ k + 1 − λ k ) where, α k is the Nesterov sequence, as expressed by Eq. (14) , and η is the adaptive coefficient introduced in this paper to attenuate the local oscillation in later stages of the search process. It uses a linear function to adjust the weight of acceleration operations, as shown in Eq. (15) . Where, τ is the preset constant which can be determined based on trial-and-error. (14) α 1 = 1 , α k + 1 = 1 + 1 + 4 α k 2 2 (15) η = { 1 − τ k , i f k < 1 τ 0 , e l s e 2.3.3 Distributed optimization of the lower level In the lower level, the optimization objective is to minimize the energy consumption of air-side components, and maintain the thermal comfort level of occupants, i.e., Eqs. (3) and (4) . The lower level aims to optimize Eq. (3) in a distributed manner. By adopting ADMM with improved Nesterov acceleration recursively, Eq. (3) is reformulated into Eq. (10) and assigned to individual agents. The local optimization task of air-side component agents and zone agents is expressed by Eqs. (16) and (17) , respectively. And the Lagrangian multipliers λ l is updated based on Eq. (18) . Expressions of the accelerated values are not given again for brevity. They have a similar form with Eqs. 12–15 . (16) x a , i k + 1 = arg min x a , i h ( x a , i ) + ρ l 2 ‖ ∑ n = 1 N z o n e , i a i n x ˆ a , i , n k + x a , i − c + λ ˆ l k ρ l ‖ 2 2 (17) x a , i , j k + 1 = arg min x a , i , j C z o n e , i , j ( x a , i , j ) + ρ l 2 ‖ ∑ n = 1 n ≠ j N z o n e , i a i n x ˆ a , i , n k + a i j x a , i , j + x ˆ a , i k − c + λ ˆ l k ρ l ‖ 2 2 (18) λ l k + 1 = λ ˆ l k + ρ l ( c − x a , i k + 1 − ∑ j = 1 N z o n e , i a i j x a , i , j k + 1 ) where, subscript l represents the lower level, and ρ l is the penalty factor of the lower level. For the sake of clarity, a function h is defined as the sum of the energy consumption of the i th air-side component and quadratic penalty term of constraints, as expressed by Eq. (19) . (19) h ( x a , i ) = P i ( x a , i ) + ρ u 2 ‖ ∑ n = 1 n ≠ i N w A n x ˆ w , n k + A i x w , i + ∑ n = 1 N a B n x ˆ a , n k − c + λ ˆ u k ρ u ‖ 2 2 2.3.4 Global optimization process of the hierarchical ADMM algorithm Some assumptions are needed to ensure global optimization capacity [ 28 ]: 1) all of the P m (·) and M i (·) must be convex functions; 2) all of the constraints must be linear. The two consumptions can be satisfied by choosing appropriate models and relaxing nonlinear constraints into linear forms, respectively. They are discussed in detail in Section 3.2 . The optimization process of the proposed hierarchical ADMM algorithm comprises of a series of local optimization task and Lagrange multipliers update between two levels. In the lower level, zone agents optimize x a,i,j to maintain the occupants’ thermal comfort level of their corresponding zones, and air-side component agents optimize x a,i to minimize the energy consumption of their corresponding air-side components. The optimized values of x a,i,j are sent to air-side component agents for the updates of λ l until the lower convergence reaches. In the upper level, water-side component agents optimize x w,m to minimize the energy consumption of their corresponding water-side component. The optimized values of x w,m and x a,i are sent to the coordinator agent for the update of λ u . The iteration process repeats until the upper convergence is reached. The pseudocode of the hierarchical ADMM algorithm with the improved Nesterov acceleration is shown in Algorithm 1 . Where, M u and M l are the numbers of max iterations in the upper level and lower level, respectively. The proposed hierarchical ADMM algorithm can be simply generalized to deeper hierarchy by recursive call of the ADMM algorithm. For performance reasons, no more than four layers are recommended. Algorithm 1 Pseudocode of the hierarchical ADMM algorithm utilized in the proposed distributed optimal control framework Image 1\n\nMethods\n2.4 Definition of agents for the proposed framework In conventional distributed optimal control framework adopting MAS, agents are defined based on the optimization procedure of distributed optimization algorithms with master-slave structures. They cannot be utilized in the proposed hierarchical optimization framework. In this paper, three types of agents, i.e., the coordinator agent, component agent, and zone agent, are defined to realize the distributed control of HVAC systems. 2.4.1 Coordinator agent The coordinator agent is designed as a coordinator of component agents to ensure the satisfactions of constraints among components during the iteration process. It has three major functions: convergence judgment, Lagrangian multipliers update, and Lagrangian multipliers acceleration. At each iteration, it firstly judges whether the algorithm has achieved the global convergence based on the optimized values from component agents. In this study, the primal residual and dual residual are adopted as stopping criterions [ 29 ]. The primal residual reflects the degree of constraints satisfaction, as shown in Eq. (20) . And the dual residual reflects the rate of relative changes between two iterations for each control variable, as shown in Eq. (21) . (20) ‖ ∑ m = 1 N w A m x w , m k + 1 + ∑ i = 1 N a B i x a , i k + 1 − c ‖ 2 2 ≤ ε u p r i (21) ‖ x w , m k + 1 − x w , m k x w , m k ‖ 1 ≤ ε u d u a l where, ε u p r i is the threshold of the primal residual reflecting the maximum tolerance of ADMM to the deviation of constraints among components, and ε u d u a l is the threshold of the dual residual reflecting the maximum relative difference between two iterations of each control variable. If the convergence criterions are satisfied, the coordinator agent stops the iteration process and the optimal solutions are obtained. Otherwise, the coordinator agent updates λ u , as shown in Eq. (11) . After the update of λ u , it calculates the accelerated values λ ˆ u based on Eqs. 13–15 . The updated values are sent to each component agent for local optimization at the next iteration. 2.4.2 Component agent The component agent has two main functions. The first function is to execute the local optimization of the corresponding component. At each iteration, each component agent firstly optimizes x w,m and x a,i based on the information from the coordinator agent and other component agents to minimize the energy consumption of the corresponding component, as shown in Eqs. (9) and (10) . The energy consumption of a component can be predicted by the simplified component model. Then, it calculates the accelerated values x ˆ w , m and x ˆ a , i according to Eqs. (12), (14) and (15) . The values of x ˆ w , m and x ˆ a , i are sent to the coordinator agent to update λ u in the upper level. The second function is to coordinate the zone agents to ensure the satisfaction of constraints among the corresponding component and zones. Similar to the functions of a coordinator agent, a component agent firstly checks whether the convergence in the lower level has been reached based on Eqs. 22–24 . (22) ‖ ∑ j = 1 N z o n e , i a i j x a , i , j + x a , i − c ‖ 2 2 ≤ ε l p r i (23) ‖ x a , i k + 1 − x a , i k x a , i k ‖ 1 ≤ ε l d u a l (24) ‖ x a , i , j k + 1 − x a , i , j k x a , i , j k ‖ 1 ≤ ε l d u a l If the convergence criterions are met, the iteration process stops and the optimal values of x a , i and x ˆ a , i in the lower level are sent to the coordinator agent for global coordination. If not, the component agent updates λ l and λ ˆ l , respectively. Then, they are sent to zone agents for local optimization. 2.4.3 Zone agent The zone agent is designed as a local optimizer of the corresponding zone to maintain the thermal comfort level of occupants. It can be predicted by a steady-state model [ 14 ] or a dynamic model [ 30 ]. At each iteration, a zone agent optimizes x a,i,j based on the information from the corresponding component agent and other zone agents, as shown in Eq. (17) . Then, it calculates the accelerated value x ˆ a , i , j . The values of x a,i,j and x ˆ a , i , j are sent to the component agent for coordination in the lower level.\n\nResults\n3 Evaluation 3.1 Description of the tested HVAC system In this study, an office building HVAC system located in Hangzhou, China is simulated. It has three blocks with total floor area of 79,480 m 2 . The opening hour is from 9:00 a.m. to 6:00 p.m. The HVAC system consists of a cooling water system, a chilled water system, and three variable air volume systems [ 31 , 32 ]. The schematic of the tested HVAC system is as shown in Fig. 5 . The occupants’ thermal comfort of each zone is controlled by variable air volume boxes through regulating the entering air flow rates. The air handling units (AHUs) condition the mixed air and send it to each variable air volume box for the regulation. Chillers generate the chilled water to provide AHUs with cold energy. The heat generated by chillers is cooled by the cooling water and is rejected to the ambient air through cooling towers. The cycles of the chilled water and cooling water are driven by constant speed chilled water pumps and cooling water pumps, respectively. Detailed characteristics of the HVAC system are listed in Table 1 . To simulate the dynamics of the HVAC system as real as possible, a customized simulation platform is developed in Java by the authors. The theory of graph is used to represent the actual pipe network system [ 33 ]. The finite volume method [ 34 ] is implemented to realize the hydraulic computation of the pipe network. Each component in HVAC systems are built based on the ASHRAE Equipment Guide [ 35 ]. In this study, two typical working conditions of the HVAC system (an early-summer day and a mid-summer day) are selected as two tested cases to evaluate the control accuracy of different control methods. Details of two operation conditions are listed in Table 2 . Outdoor weather condition profiles in case 1 and case 2 are shown in Fig. 6 and Fig. 7 , respectively. Cooling load curves of twenty zones in case 1 and case 2 are shown in Fig. 8 and Fig. 9 , respectively. The optimal control interval is set to be 30 min. 3.2 Formulation of the proposed framework for the tested HVAC system 3.2.1 Centralized optimization problem of the tested HVAC system In this study, four types of typical control variables are considered, i.e., set-points of cooling tower outlet temperature T chws,p , set-points of chilled water supply temperature T cto,q , set-points of AHU's air flow rate q i , and set-points of individual zone's air flow rate q i,j . The control objective is to minimize the energy consumption of the tested HVAC system, and keep the indoor air temperature in each zone below the temperature set-points, as expressed in Eq. (25) . The energy consumption of pumps is not considered as their speed is constant. Several assumptions are made to formulate the constraints: 1) the heat exchange capacity of an AHU is assumed to be equal to the cooling load of all zones it serves, as shown in Eq. (26) ; 2) the heat rejection of cooling towers is assumed to be equal to a sum of the overall cooling load and power consumption of chillers, as expressed by Eq. (27) ; 3) the overall supply air volume of an AHU is assumed to be equal to a sum of air volumes of all zones it serves, as presented in Eq. (28) . (25) min T c h w s , p , T c t o , q , q i , q i , j J = ∑ i = 1 N A H U [ P A H U , i ( q i ) + ω ∑ j = 1 N z o n e , i C z o n e , i , j ( q i , j ) ] + ∑ p = 1 N c h i l l e r P c h i l l e r , p ( T c h w s , p , T c t o ) + ∑ q = 1 N c t P c t , q ( T c t o , q ) (26) s . t . Q A H U , i = ∑ j = 1 N z o n e , i Q c l , i , j (27) ∑ q = 1 N c t Q c t , q = ∑ i = 1 N A H U ∑ j = 1 N z o n e , i Q c l , i , j + ∑ p = 1 N c h i l l e r P c h i l l e r , p ( T c h w s , p , T c t o ) (28) q i = ∑ j = 1 N z o n e , i q i , j where, Q AHU,i is the heat exchange capacity of the i th AHU, Q cl,i,j is the cooling load of the j th zone served by the i th AHU, Q ct,q is the amount of heat rejection of the q th cooling tower, and T cto is the average cooling tower outlet temperature. The energy consumption of a chiller is expressed by Eq. (29) . It is based on the chiller model proposed in Ref. [ 36 ]. (29) P c h i l l e r = Q n o m ⋅ C O P n o m ⋅ [ a 0 + a 1 ⋅ Q Q n o m + a 2 ⋅ ( Q Q n o m ) 2 ] ⋅ ( b 0 + b 1 T c h w s + b 2 T c t o + b 3 T c h w s 2 + b 4 T c t o 2 + b 5 T c h w s T c t o ) where, Q nom is the nominal cooling capacity, COP nom is the nominal coefficient of performance, and Q is the actual cooling load. The heat rejection of a cooling tower is calculated by Eq. (30) [ 37 ]. The energy consumption of cooling tower fans is calculated by Eq. (31) based on the affinity law of fans and pumps [ 38 ]. Considering the actual variable motor efficiency under different load conditions, the exponent of power consumption is set as 2 in this study [ 39 ]. (30) Q c t = c 0 q a c 1 q w c 2 ( T c t , i n − T w b ) c 4 (31) P c t = P c t , r a t e d ⋅ ( q a q a , r a t e d ) 2 where, q a is the inlet air flow rate of cooling tower fans, q w is the cooling tower inlet flow rate, T ct,in is the cooling tower inlet temperature, T wb is the web bulb temperature of the ambient air, P ct,rated is the rated power of fans, and q a,rated is the rated inlet air flow rate of cooling tower fans. The operating frequency of cooling tower fans is set as 25–50 Hz based on [ 40 ]. The energy consumption of AHU fans is calculated by Eq. (32) . The heat exchange capacity of an AHU Q AHU is calculated by Eq. (33) . It is a simplified cooling coil model proposed in Ref. [ 41 ]. (32) P A H U , i = P A H U i , r a t e d ⋅ ( q i q i , r a t e d ) 2 (33) Q A H U , i = d 0 q i d 2 1 + d 1 ( q i q c h w s ) d 2 ( T a − T c h w s ) where, P AHUi, rated is the rated power consumption of the i th AHU, q i,rated is the rated air flow rate of the i th AHU, q chws is the flow rate of chilled water, and T a is the air inlet temperature. The indoor temperature T zone,i,j is selected as the indicator to evaluate the thermal comfort level of occupants. It is supposed to be below the indoor temperature set-point T i,j,set , as expressed by Eq. (34) . In this study, T i,j,set is set as 26.0 °C. (34) C z o n e , i , j = max ( 0 , T z o n e , i , j − T i , j , s e t ) The indoor temperature is determined based on the steady-state temperature model [ 42 ]. The model is derived from the heat balance equation of a zone, as shown in Eq. (35) . (35) T z o n e , i , j = T i n , i , j + Q c l , i , j c p ⋅ q i , j where, T in,i,j is the air inlet temperature of the j th zone, and C p is the specific heat at constant pressure of the air. 3.2.2 Distributed optimization of the tested HVAC system The flowchart of the proposed framework for the tested HVAC system is shown in Fig. 10 . In the lower level, each zone agent optimizes the supply air flow rate of zones q i,j to maintain the thermal comfort level of occupants. And each AHU agent optimizes the set-point of supply air flow rate of air-side components q i to minimize the energy consumption of the corresponding AHU. At each iteration of the lower level, AHU agents judge whether the convergence criterions are met. If the convergence criterions are met, the iteration process of the lower level stops. Otherwise, they update the Lagrangian multipliers λ l,i , as shown in Eq. (36) . (36) λ l , i k + 1 = λ ˆ l , i k + ρ l ( ∑ j = 1 N z o n e , i q ˆ i , j − q ˆ i ) In the upper level, each chiller agent optimizes the set-point of chilled water supply temperature T chws,p to minimize the energy consumption of the corresponding chiller. And each cooling tower agent optimizes the set-point of cooling tower outlet temperature T cto,q to minimize the energy consumption of the corresponding cooling tower. At each iteration of the upper level, the coordinator agent judges whether the convergence has been reached. If the convergence has been reached, the iteration process stops and the optimal solutions are obtained. Otherwise, it updates the Lagrangian multipliers λ u,i based on Eq. (37) . (37) λ u , i k + 1 = λ ˆ u , i k + ρ u ( ∑ j = 1 N z o n e , i Q c l , i , j − Q A H U , i + ∑ i = 1 N A H U ∑ j = 1 N z o n e , i Q c l , i , j + ∑ p = 1 N c h i l l e r P c h i l l e r , p − ∑ q = 1 N c t Q c t , q ) 3.3 Comparisons of performance In this study, four kind of optimal control methods for HVAC systems are tested and compared, including a conventional centralized control method (Method 1), a conventional distributed control method (Method 2), a hierarchical distributed control method (Method 3), and the proposed method (Method 4). Details of Methods 1–3 are given as follows. Method 1 The set-points of HVAC systems are optimized in a centralized manner, as discussed in Section 3.2.1 . Genetic algorithm (GA) is utilized in this study to solve the optimization problem. It is one of the most common centralized method for optimal control of HVAC systems. More details of GA can be found in Refs. [ 43 , 44 ], and it is not discussed for brevity. In this study, GA is implemented in the MATLAB GA toolbox, and the parameters of GA are determined based on [ 45 ]. Method 2 As discussed before, conventional distributed control methods adopt a master-slave architecture. All of component agents and zone agents are assigned in the same layer for local optimization. And the coordinator agent is responsible for coordination of other agents. An ADMM algorithm is adopted in the conventional distributed control method. More details of this method can be found in Refs. [ 13–16 ]. Method 3 Method 3 is very similar to the proposed method, i.e. Method 4. The only difference is that Method 3 does not introduce the Nesterov acceleration step into the hierarchical distributed control framework. The values of hyper-parameters in Methods 2–4 are set to be same, i.e., ρ u = 100, ρ l = 10, ε u p r i = ε l p r i = 0.1, τ = 0.05, and ε u d u a l = ε l d u a l = 0.01. They are determined based on the trial-and-error. Simulations are conducted on a computer with Core i5-9400F CPU@2.9 GHz and 16 GB RAM. 3.3.1 Performance of control accuracy Control accuracy is a crucial aspect for evaluating how well a control method can minimize the power consumption of the HVAC system and maintain the occupants' thermal comfort of each zone. Two indicators are considered in this study, i.e., the energy saving potential, and degree of satisfaction for occupants’ thermal comfort. The energy consumptions for four control methods in case 1 and case 2 are shown in Fig. 11 . Compared with distributed control methods (taking Method 4 for instance), the energy consumption using a centralized control method (Method 1) is increased from 6812.23 kWh to 7088.18 kWh (4.05%) in case 1 and from 10418.85 kWh to 10973.84 kWh (5.33%) in case 2. Three distributed control methods, i.e., Methods 2–4, show the similar optimization results. Among them, Method 4 has the minimum energy consumption (7088.18 kWh in case 1 and 10418.85 kWh in case 2). Table 3 lists the optimization results in case 2 at 2:00 p.m. for four control methods. The energy consumption is almost the same using three distributed control methods. Results show that the proposed method (Method 4) is able to find the optimal solutions as the conventional ADMM algorithm (Method 2). GA (Method 1) shows worst performance on optimization capacity, which is 54.02 kWh (3.90%) more than that of Method 4. The box plots of indoor air temperature of twenty zones for four methods in case 1 and case 2 are shown in Fig. 12 and Fig. 13 , respectively. It can be observed that the three distributed control methods show better control stability on maintaining the indoor thermal comfort level than method 1. For example, the indoor air temperature in twenty zones using three distributed control methods keeps stable between 25.84 °C and 25.98 °C at 2:00 p.m. in case 2, which are strictly controlled below 26.0 °C. However, the indoor air temperature in twenty zones using method 1 varies from 22.76 °C (in zone 10) to 27.22 °C (in zone 7), leading to more thermal discomfort of occupants. In order to quantify the thermal comfort level of occupants on the tested day, a thermal comfort index ( TCI ) is introduced in this study. It is defined as the sum of all the products of indoor air temperature exceeding the set-point (26 °C) and its corresponding time interval, as expressed by Eq. (38) . TCI reflects the temperature control performance of a control method over the entire time period. A higher TCI indicates the lower attention of a control method to the thermal comfort level of occupants. Figs. 14 and 15 show the TCI s of twenty zones for four different control methods in case 1 and case 2, respectively. Maximum TCI s of twenty zones using methods 1–4 are 220.46 °C·min, 7.66 °C·min, 9.47 °C·min, and 8.8 °C·min for zone 7 in case 2. It can be found that method 1 has the largest average TCI (22.06 °C·min in case 1 and 13.54 °C·min in case 2) among four control methods. Compared with method 1, average TCI s of methods 2–4 are only 0.62 °C·min, 0.42 °C·min, and 0.41 °C·min in case 1 and 0.73 °C·min, 0.83 °C·min, and 0.74 °C·min in case 2. (38) T C I = max ( 0 , T z o n e − T s e t ) × Δ T t > 26 ° C 3.3.2 Performance of computation load The computation load reflects the real-time control capacity of a control method. To quantitively measure the computation load, the computation time is introduced in this study as an evaluation indicator. Figs. 16 and 17 present the computation time of Methods 1–4 in Case 1 and Case 2, respectively. Method 1 has the longest computation time among the four control methods. It reaches up to 34.7 s in Case 1 and 45.6 s in Case 2 on average. Moreover, it can be observed that the curve of Method 1 oscillates violently. It is because that Method 1 adopts GA to solve the high-dimensional optimization problem. The crossover, mutation and selection operations of GA are completely random, leading to a large difference on the computation time. Method 2 shows lower computation times, which is 28.6 s in Case 1 and 39.5 s in Case 2. It has a reduction of computation times by about 6.1 s. Although Method 2, i.e., the conventional ADMM algorithm, achieves a passable decrease of computation time, it still suffers from heavy computation load issues. Due to limitations in computational capacities of current IoT devices, the actual computation time of Methods 1–2 implemented in IoT-based control platforms will be much greater than the theoretical computation time [ 16 ]. It will lead to infeasibility of these control methods for practical applications. However, Method 3 and Method 4 achieves a significant reduction in computation time by adopting hierarchical frameworks. In comparisons to the conventional ADMM algorithm (Method 2), Method 3 reaches a decrease of 39.5% (Case 1) and 41.5% (Case 2) averagely in computation time. On this basis, by introducing Nesterov acceleration into Method 3, the computation time of Method 4 is further reduced by 6.3 s (36.4%) in Case 1 and 9.8 s (42.4%) in Case 2. Compared with centralized control methods (Method 1) and conventional distributed control methods (Method 2), the proposed method (Method 4) achieves an enhancement of computation performance by 3.3 times on average in two cases. It is worth noting that the curve of Method 3 in Fig. 16 is sharper than that of Method 2. It is because that the computation time of Method 3 is determined not only by the number of iterations in the upper level as Method 2, but also by that in the lower level. The difference of the average number of iterations in the lower level would lead to volatility of the computation time. The huge improvement of computation performance makes it possible for MAS-based distributed control to be implemented in future IoT-based control scenarios. To further investigate the computation load between distributed control methods (Methods 1–3), the number of iterations, a popular indicator for evaluating distributed optimization algorithms, is introduced in this study. A small number of iterations will lead to low computation time. Moreover, it can reduce the communication burden between IoT devices and increase the reliability of distributed control methods. The number of iterations for convergence using Methods 2–4 in case 1 and case 2 are illustrated in Figs. 18 and 19 , respectively. It can be found that Method 2 has a maximum average number of iterations (78.3 steps) to reach convergence. By contrast, the average number of iterations of Method 3 is only 39.2 steps, which is 49.96% lower than that of Method 2. On the basis of Method 3, Method 4 further increases the convergence rate by 55.92% averagely. Especially at 10:00 a.m., 11:30 a.m., and 6:00 p.m. of case 1, it only takes 13 iteration steps to reach convergence. In the worst case (at 9:00 a.m. of case 2), it still can converge within 25 steps. Evolution of primal residuals at a specific time point (2:00 p.m.) of case 2 using Methods 2–4 is shown in Fig. 20 . It can be seen that Method 2 needs 75 iteration steps to reach convergence, while Method 3 reaches convergence within 40 iteration steps. On the basis, Method 4 further converges within only 20 iteration steps, which is 20 steps less than that of method 3. It is worth noting that oscillation happens during the convergence process of Method 2, which significantly reduces the convergence rate. On the contrary, Method 3 and Method 4 adopt the hierarchical framework and avoid the occurrence of oscillation. They show strong stability on convergence performance. Fig. 21 shows the number of iterations in the lower level for Method 3 and Method 4 at 2:00 p.m. of case 1. Results show that the convergence rate in the lower level is very fast except for the first iteration step of the upper level. It only takes 2.05 iteration steps on average to reach convergence in the lower level. The main reason is that initial solutions of the lower level are set to be optimal solutions of the last iteration process. They are very close to optimal solutions of the current iteration process, and only some fine-tunings are needed to reach convergence.\n\nMethods\n3.2 Formulation of the proposed framework for the tested HVAC system 3.2.1 Centralized optimization problem of the tested HVAC system In this study, four types of typical control variables are considered, i.e., set-points of cooling tower outlet temperature T chws,p , set-points of chilled water supply temperature T cto,q , set-points of AHU's air flow rate q i , and set-points of individual zone's air flow rate q i,j . The control objective is to minimize the energy consumption of the tested HVAC system, and keep the indoor air temperature in each zone below the temperature set-points, as expressed in Eq. (25) . The energy consumption of pumps is not considered as their speed is constant. Several assumptions are made to formulate the constraints: 1) the heat exchange capacity of an AHU is assumed to be equal to the cooling load of all zones it serves, as shown in Eq. (26) ; 2) the heat rejection of cooling towers is assumed to be equal to a sum of the overall cooling load and power consumption of chillers, as expressed by Eq. (27) ; 3) the overall supply air volume of an AHU is assumed to be equal to a sum of air volumes of all zones it serves, as presented in Eq. (28) . (25) min T c h w s , p , T c t o , q , q i , q i , j J = ∑ i = 1 N A H U [ P A H U , i ( q i ) + ω ∑ j = 1 N z o n e , i C z o n e , i , j ( q i , j ) ] + ∑ p = 1 N c h i l l e r P c h i l l e r , p ( T c h w s , p , T c t o ) + ∑ q = 1 N c t P c t , q ( T c t o , q ) (26) s . t . Q A H U , i = ∑ j = 1 N z o n e , i Q c l , i , j (27) ∑ q = 1 N c t Q c t , q = ∑ i = 1 N A H U ∑ j = 1 N z o n e , i Q c l , i , j + ∑ p = 1 N c h i l l e r P c h i l l e r , p ( T c h w s , p , T c t o ) (28) q i = ∑ j = 1 N z o n e , i q i , j where, Q AHU,i is the heat exchange capacity of the i th AHU, Q cl,i,j is the cooling load of the j th zone served by the i th AHU, Q ct,q is the amount of heat rejection of the q th cooling tower, and T cto is the average cooling tower outlet temperature. The energy consumption of a chiller is expressed by Eq. (29) . It is based on the chiller model proposed in Ref. [ 36 ]. (29) P c h i l l e r = Q n o m ⋅ C O P n o m ⋅ [ a 0 + a 1 ⋅ Q Q n o m + a 2 ⋅ ( Q Q n o m ) 2 ] ⋅ ( b 0 + b 1 T c h w s + b 2 T c t o + b 3 T c h w s 2 + b 4 T c t o 2 + b 5 T c h w s T c t o ) where, Q nom is the nominal cooling capacity, COP nom is the nominal coefficient of performance, and Q is the actual cooling load. The heat rejection of a cooling tower is calculated by Eq. (30) [ 37 ]. The energy consumption of cooling tower fans is calculated by Eq. (31) based on the affinity law of fans and pumps [ 38 ]. Considering the actual variable motor efficiency under different load conditions, the exponent of power consumption is set as 2 in this study [ 39 ]. (30) Q c t = c 0 q a c 1 q w c 2 ( T c t , i n − T w b ) c 4 (31) P c t = P c t , r a t e d ⋅ ( q a q a , r a t e d ) 2 where, q a is the inlet air flow rate of cooling tower fans, q w is the cooling tower inlet flow rate, T ct,in is the cooling tower inlet temperature, T wb is the web bulb temperature of the ambient air, P ct,rated is the rated power of fans, and q a,rated is the rated inlet air flow rate of cooling tower fans. The operating frequency of cooling tower fans is set as 25–50 Hz based on [ 40 ]. The energy consumption of AHU fans is calculated by Eq. (32) . The heat exchange capacity of an AHU Q AHU is calculated by Eq. (33) . It is a simplified cooling coil model proposed in Ref. [ 41 ]. (32) P A H U , i = P A H U i , r a t e d ⋅ ( q i q i , r a t e d ) 2 (33) Q A H U , i = d 0 q i d 2 1 + d 1 ( q i q c h w s ) d 2 ( T a − T c h w s ) where, P AHUi, rated is the rated power consumption of the i th AHU, q i,rated is the rated air flow rate of the i th AHU, q chws is the flow rate of chilled water, and T a is the air inlet temperature. The indoor temperature T zone,i,j is selected as the indicator to evaluate the thermal comfort level of occupants. It is supposed to be below the indoor temperature set-point T i,j,set , as expressed by Eq. (34) . In this study, T i,j,set is set as 26.0 °C. (34) C z o n e , i , j = max ( 0 , T z o n e , i , j − T i , j , s e t ) The indoor temperature is determined based on the steady-state temperature model [ 42 ]. The model is derived from the heat balance equation of a zone, as shown in Eq. (35) . (35) T z o n e , i , j = T i n , i , j + Q c l , i , j c p ⋅ q i , j where, T in,i,j is the air inlet temperature of the j th zone, and C p is the specific heat at constant pressure of the air. 3.2.2 Distributed optimization of the tested HVAC system The flowchart of the proposed framework for the tested HVAC system is shown in Fig. 10 . In the lower level, each zone agent optimizes the supply air flow rate of zones q i,j to maintain the thermal comfort level of occupants. And each AHU agent optimizes the set-point of supply air flow rate of air-side components q i to minimize the energy consumption of the corresponding AHU. At each iteration of the lower level, AHU agents judge whether the convergence criterions are met. If the convergence criterions are met, the iteration process of the lower level stops. Otherwise, they update the Lagrangian multipliers λ l,i , as shown in Eq. (36) . (36) λ l , i k + 1 = λ ˆ l , i k + ρ l ( ∑ j = 1 N z o n e , i q ˆ i , j − q ˆ i ) In the upper level, each chiller agent optimizes the set-point of chilled water supply temperature T chws,p to minimize the energy consumption of the corresponding chiller. And each cooling tower agent optimizes the set-point of cooling tower outlet temperature T cto,q to minimize the energy consumption of the corresponding cooling tower. At each iteration of the upper level, the coordinator agent judges whether the convergence has been reached. If the convergence has been reached, the iteration process stops and the optimal solutions are obtained. Otherwise, it updates the Lagrangian multipliers λ u,i based on Eq. (37) . (37) λ u , i k + 1 = λ ˆ u , i k + ρ u ( ∑ j = 1 N z o n e , i Q c l , i , j − Q A H U , i + ∑ i = 1 N A H U ∑ j = 1 N z o n e , i Q c l , i , j + ∑ p = 1 N c h i l l e r P c h i l l e r , p − ∑ q = 1 N c t Q c t , q )\n\nResults\n3.3 Comparisons of performance In this study, four kind of optimal control methods for HVAC systems are tested and compared, including a conventional centralized control method (Method 1), a conventional distributed control method (Method 2), a hierarchical distributed control method (Method 3), and the proposed method (Method 4). Details of Methods 1–3 are given as follows. Method 1 The set-points of HVAC systems are optimized in a centralized manner, as discussed in Section 3.2.1 . Genetic algorithm (GA) is utilized in this study to solve the optimization problem. It is one of the most common centralized method for optimal control of HVAC systems. More details of GA can be found in Refs. [ 43 , 44 ], and it is not discussed for brevity. In this study, GA is implemented in the MATLAB GA toolbox, and the parameters of GA are determined based on [ 45 ]. Method 2 As discussed before, conventional distributed control methods adopt a master-slave architecture. All of component agents and zone agents are assigned in the same layer for local optimization. And the coordinator agent is responsible for coordination of other agents. An ADMM algorithm is adopted in the conventional distributed control method. More details of this method can be found in Refs. [ 13–16 ]. Method 3 Method 3 is very similar to the proposed method, i.e. Method 4. The only difference is that Method 3 does not introduce the Nesterov acceleration step into the hierarchical distributed control framework. The values of hyper-parameters in Methods 2–4 are set to be same, i.e., ρ u = 100, ρ l = 10, ε u p r i = ε l p r i = 0.1, τ = 0.05, and ε u d u a l = ε l d u a l = 0.01. They are determined based on the trial-and-error. Simulations are conducted on a computer with Core i5-9400F CPU@2.9 GHz and 16 GB RAM. 3.3.1 Performance of control accuracy Control accuracy is a crucial aspect for evaluating how well a control method can minimize the power consumption of the HVAC system and maintain the occupants' thermal comfort of each zone. Two indicators are considered in this study, i.e., the energy saving potential, and degree of satisfaction for occupants’ thermal comfort. The energy consumptions for four control methods in case 1 and case 2 are shown in Fig. 11 . Compared with distributed control methods (taking Method 4 for instance), the energy consumption using a centralized control method (Method 1) is increased from 6812.23 kWh to 7088.18 kWh (4.05%) in case 1 and from 10418.85 kWh to 10973.84 kWh (5.33%) in case 2. Three distributed control methods, i.e., Methods 2–4, show the similar optimization results. Among them, Method 4 has the minimum energy consumption (7088.18 kWh in case 1 and 10418.85 kWh in case 2). Table 3 lists the optimization results in case 2 at 2:00 p.m. for four control methods. The energy consumption is almost the same using three distributed control methods. Results show that the proposed method (Method 4) is able to find the optimal solutions as the conventional ADMM algorithm (Method 2). GA (Method 1) shows worst performance on optimization capacity, which is 54.02 kWh (3.90%) more than that of Method 4. The box plots of indoor air temperature of twenty zones for four methods in case 1 and case 2 are shown in Fig. 12 and Fig. 13 , respectively. It can be observed that the three distributed control methods show better control stability on maintaining the indoor thermal comfort level than method 1. For example, the indoor air temperature in twenty zones using three distributed control methods keeps stable between 25.84 °C and 25.98 °C at 2:00 p.m. in case 2, which are strictly controlled below 26.0 °C. However, the indoor air temperature in twenty zones using method 1 varies from 22.76 °C (in zone 10) to 27.22 °C (in zone 7), leading to more thermal discomfort of occupants. In order to quantify the thermal comfort level of occupants on the tested day, a thermal comfort index ( TCI ) is introduced in this study. It is defined as the sum of all the products of indoor air temperature exceeding the set-point (26 °C) and its corresponding time interval, as expressed by Eq. (38) . TCI reflects the temperature control performance of a control method over the entire time period. A higher TCI indicates the lower attention of a control method to the thermal comfort level of occupants. Figs. 14 and 15 show the TCI s of twenty zones for four different control methods in case 1 and case 2, respectively. Maximum TCI s of twenty zones using methods 1–4 are 220.46 °C·min, 7.66 °C·min, 9.47 °C·min, and 8.8 °C·min for zone 7 in case 2. It can be found that method 1 has the largest average TCI (22.06 °C·min in case 1 and 13.54 °C·min in case 2) among four control methods. Compared with method 1, average TCI s of methods 2–4 are only 0.62 °C·min, 0.42 °C·min, and 0.41 °C·min in case 1 and 0.73 °C·min, 0.83 °C·min, and 0.74 °C·min in case 2. (38) T C I = max ( 0 , T z o n e − T s e t ) × Δ T t > 26 ° C 3.3.2 Performance of computation load The computation load reflects the real-time control capacity of a control method. To quantitively measure the computation load, the computation time is introduced in this study as an evaluation indicator. Figs. 16 and 17 present the computation time of Methods 1–4 in Case 1 and Case 2, respectively. Method 1 has the longest computation time among the four control methods. It reaches up to 34.7 s in Case 1 and 45.6 s in Case 2 on average. Moreover, it can be observed that the curve of Method 1 oscillates violently. It is because that Method 1 adopts GA to solve the high-dimensional optimization problem. The crossover, mutation and selection operations of GA are completely random, leading to a large difference on the computation time. Method 2 shows lower computation times, which is 28.6 s in Case 1 and 39.5 s in Case 2. It has a reduction of computation times by about 6.1 s. Although Method 2, i.e., the conventional ADMM algorithm, achieves a passable decrease of computation time, it still suffers from heavy computation load issues. Due to limitations in computational capacities of current IoT devices, the actual computation time of Methods 1–2 implemented in IoT-based control platforms will be much greater than the theoretical computation time [ 16 ]. It will lead to infeasibility of these control methods for practical applications. However, Method 3 and Method 4 achieves a significant reduction in computation time by adopting hierarchical frameworks. In comparisons to the conventional ADMM algorithm (Method 2), Method 3 reaches a decrease of 39.5% (Case 1) and 41.5% (Case 2) averagely in computation time. On this basis, by introducing Nesterov acceleration into Method 3, the computation time of Method 4 is further reduced by 6.3 s (36.4%) in Case 1 and 9.8 s (42.4%) in Case 2. Compared with centralized control methods (Method 1) and conventional distributed control methods (Method 2), the proposed method (Method 4) achieves an enhancement of computation performance by 3.3 times on average in two cases. It is worth noting that the curve of Method 3 in Fig. 16 is sharper than that of Method 2. It is because that the computation time of Method 3 is determined not only by the number of iterations in the upper level as Method 2, but also by that in the lower level. The difference of the average number of iterations in the lower level would lead to volatility of the computation time. The huge improvement of computation performance makes it possible for MAS-based distributed control to be implemented in future IoT-based control scenarios. To further investigate the computation load between distributed control methods (Methods 1–3), the number of iterations, a popular indicator for evaluating distributed optimization algorithms, is introduced in this study. A small number of iterations will lead to low computation time. Moreover, it can reduce the communication burden between IoT devices and increase the reliability of distributed control methods. The number of iterations for convergence using Methods 2–4 in case 1 and case 2 are illustrated in Figs. 18 and 19 , respectively. It can be found that Method 2 has a maximum average number of iterations (78.3 steps) to reach convergence. By contrast, the average number of iterations of Method 3 is only 39.2 steps, which is 49.96% lower than that of Method 2. On the basis of Method 3, Method 4 further increases the convergence rate by 55.92% averagely. Especially at 10:00 a.m., 11:30 a.m., and 6:00 p.m. of case 1, it only takes 13 iteration steps to reach convergence. In the worst case (at 9:00 a.m. of case 2), it still can converge within 25 steps. Evolution of primal residuals at a specific time point (2:00 p.m.) of case 2 using Methods 2–4 is shown in Fig. 20 . It can be seen that Method 2 needs 75 iteration steps to reach convergence, while Method 3 reaches convergence within 40 iteration steps. On the basis, Method 4 further converges within only 20 iteration steps, which is 20 steps less than that of method 3. It is worth noting that oscillation happens during the convergence process of Method 2, which significantly reduces the convergence rate. On the contrary, Method 3 and Method 4 adopt the hierarchical framework and avoid the occurrence of oscillation. They show strong stability on convergence performance. Fig. 21 shows the number of iterations in the lower level for Method 3 and Method 4 at 2:00 p.m. of case 1. Results show that the convergence rate in the lower level is very fast except for the first iteration step of the upper level. It only takes 2.05 iteration steps on average to reach convergence in the lower level. The main reason is that initial solutions of the lower level are set to be optimal solutions of the last iteration process. They are very close to optimal solutions of the current iteration process, and only some fine-tunings are needed to reach convergence.\n\nResults\n3.3.1 Performance of control accuracy Control accuracy is a crucial aspect for evaluating how well a control method can minimize the power consumption of the HVAC system and maintain the occupants' thermal comfort of each zone. Two indicators are considered in this study, i.e., the energy saving potential, and degree of satisfaction for occupants’ thermal comfort. The energy consumptions for four control methods in case 1 and case 2 are shown in Fig. 11 . Compared with distributed control methods (taking Method 4 for instance), the energy consumption using a centralized control method (Method 1) is increased from 6812.23 kWh to 7088.18 kWh (4.05%) in case 1 and from 10418.85 kWh to 10973.84 kWh (5.33%) in case 2. Three distributed control methods, i.e., Methods 2–4, show the similar optimization results. Among them, Method 4 has the minimum energy consumption (7088.18 kWh in case 1 and 10418.85 kWh in case 2). Table 3 lists the optimization results in case 2 at 2:00 p.m. for four control methods. The energy consumption is almost the same using three distributed control methods. Results show that the proposed method (Method 4) is able to find the optimal solutions as the conventional ADMM algorithm (Method 2). GA (Method 1) shows worst performance on optimization capacity, which is 54.02 kWh (3.90%) more than that of Method 4. The box plots of indoor air temperature of twenty zones for four methods in case 1 and case 2 are shown in Fig. 12 and Fig. 13 , respectively. It can be observed that the three distributed control methods show better control stability on maintaining the indoor thermal comfort level than method 1. For example, the indoor air temperature in twenty zones using three distributed control methods keeps stable between 25.84 °C and 25.98 °C at 2:00 p.m. in case 2, which are strictly controlled below 26.0 °C. However, the indoor air temperature in twenty zones using method 1 varies from 22.76 °C (in zone 10) to 27.22 °C (in zone 7), leading to more thermal discomfort of occupants. In order to quantify the thermal comfort level of occupants on the tested day, a thermal comfort index ( TCI ) is introduced in this study. It is defined as the sum of all the products of indoor air temperature exceeding the set-point (26 °C) and its corresponding time interval, as expressed by Eq. (38) . TCI reflects the temperature control performance of a control method over the entire time period. A higher TCI indicates the lower attention of a control method to the thermal comfort level of occupants. Figs. 14 and 15 show the TCI s of twenty zones for four different control methods in case 1 and case 2, respectively. Maximum TCI s of twenty zones using methods 1–4 are 220.46 °C·min, 7.66 °C·min, 9.47 °C·min, and 8.8 °C·min for zone 7 in case 2. It can be found that method 1 has the largest average TCI (22.06 °C·min in case 1 and 13.54 °C·min in case 2) among four control methods. Compared with method 1, average TCI s of methods 2–4 are only 0.62 °C·min, 0.42 °C·min, and 0.41 °C·min in case 1 and 0.73 °C·min, 0.83 °C·min, and 0.74 °C·min in case 2. (38) T C I = max ( 0 , T z o n e − T s e t ) × Δ T t > 26 ° C\n\nResults\n3.3.2 Performance of computation load The computation load reflects the real-time control capacity of a control method. To quantitively measure the computation load, the computation time is introduced in this study as an evaluation indicator. Figs. 16 and 17 present the computation time of Methods 1–4 in Case 1 and Case 2, respectively. Method 1 has the longest computation time among the four control methods. It reaches up to 34.7 s in Case 1 and 45.6 s in Case 2 on average. Moreover, it can be observed that the curve of Method 1 oscillates violently. It is because that Method 1 adopts GA to solve the high-dimensional optimization problem. The crossover, mutation and selection operations of GA are completely random, leading to a large difference on the computation time. Method 2 shows lower computation times, which is 28.6 s in Case 1 and 39.5 s in Case 2. It has a reduction of computation times by about 6.1 s. Although Method 2, i.e., the conventional ADMM algorithm, achieves a passable decrease of computation time, it still suffers from heavy computation load issues. Due to limitations in computational capacities of current IoT devices, the actual computation time of Methods 1–2 implemented in IoT-based control platforms will be much greater than the theoretical computation time [ 16 ]. It will lead to infeasibility of these control methods for practical applications. However, Method 3 and Method 4 achieves a significant reduction in computation time by adopting hierarchical frameworks. In comparisons to the conventional ADMM algorithm (Method 2), Method 3 reaches a decrease of 39.5% (Case 1) and 41.5% (Case 2) averagely in computation time. On this basis, by introducing Nesterov acceleration into Method 3, the computation time of Method 4 is further reduced by 6.3 s (36.4%) in Case 1 and 9.8 s (42.4%) in Case 2. Compared with centralized control methods (Method 1) and conventional distributed control methods (Method 2), the proposed method (Method 4) achieves an enhancement of computation performance by 3.3 times on average in two cases. It is worth noting that the curve of Method 3 in Fig. 16 is sharper than that of Method 2. It is because that the computation time of Method 3 is determined not only by the number of iterations in the upper level as Method 2, but also by that in the lower level. The difference of the average number of iterations in the lower level would lead to volatility of the computation time. The huge improvement of computation performance makes it possible for MAS-based distributed control to be implemented in future IoT-based control scenarios. To further investigate the computation load between distributed control methods (Methods 1–3), the number of iterations, a popular indicator for evaluating distributed optimization algorithms, is introduced in this study. A small number of iterations will lead to low computation time. Moreover, it can reduce the communication burden between IoT devices and increase the reliability of distributed control methods. The number of iterations for convergence using Methods 2–4 in case 1 and case 2 are illustrated in Figs. 18 and 19 , respectively. It can be found that Method 2 has a maximum average number of iterations (78.3 steps) to reach convergence. By contrast, the average number of iterations of Method 3 is only 39.2 steps, which is 49.96% lower than that of Method 2. On the basis of Method 3, Method 4 further increases the convergence rate by 55.92% averagely. Especially at 10:00 a.m., 11:30 a.m., and 6:00 p.m. of case 1, it only takes 13 iteration steps to reach convergence. In the worst case (at 9:00 a.m. of case 2), it still can converge within 25 steps. Evolution of primal residuals at a specific time point (2:00 p.m.) of case 2 using Methods 2–4 is shown in Fig. 20 . It can be seen that Method 2 needs 75 iteration steps to reach convergence, while Method 3 reaches convergence within 40 iteration steps. On the basis, Method 4 further converges within only 20 iteration steps, which is 20 steps less than that of method 3. It is worth noting that oscillation happens during the convergence process of Method 2, which significantly reduces the convergence rate. On the contrary, Method 3 and Method 4 adopt the hierarchical framework and avoid the occurrence of oscillation. They show strong stability on convergence performance. Fig. 21 shows the number of iterations in the lower level for Method 3 and Method 4 at 2:00 p.m. of case 1. Results show that the convergence rate in the lower level is very fast except for the first iteration step of the upper level. It only takes 2.05 iteration steps on average to reach convergence in the lower level. The main reason is that initial solutions of the lower level are set to be optimal solutions of the last iteration process. They are very close to optimal solutions of the current iteration process, and only some fine-tunings are needed to reach convergence.\n\nConclusion\n4 Conclusions In this paper, a general distributed optimal control framework using multi-agent systems is proposed to improve the distributed control performance for practical applications in large-scale and complex building heating, ventilation, and air conditioning (HVAC) systems. A hierarchical structure with multi layers is presented to describe the tree-like structure of various HVAC systems. Based on the hierarchical structure from the top layer to the bottom layer, the conventional big distributed optimization task for a typical HVAC system is divided into a series of smaller local optimization tasks hierarchically. A hierarchical alternating direction multipliers method (ADMM) is utilized to solve local optimization tasks layer by layer in a recursive manner. A Nesterov acceleration technique is introduced to increase the convergence rate of the hierarchical ADMM. Evaluations are made in a typical HVAC system with a chiller plant and three multi-zone variable air volume systems. Two typical days, i.e., an early-summer day and a mid-summer day, are selected as the test cases. Three conventional methods are introduced for performance comparison with the proposed framework, including a centralized control method, a conventional distributed control method and a hierarchical control method without acceleration. The proposed framework achieves outstanding performance on computation load. Compared with the conventional distributed control method, it reaches a reduction in computation time by 68.3% on an early-summer day and 70.8% on a mid-summer day. On average, the computation time is reduced by 69.55% on the two days. For the convergence rate, it only takes 17.3 iteration steps on average to reach convergence, which is 77.95% lower than that of the conventional distributed control method (averagely 78.3 iteration steps). Moreover, the proposed framework shows good control accuracy performance on enhancement of the energy efficiency. Compared with the centralized control method, the energy consumption is decreased by 275.95 kWh (i.e., 4.05%) and 554.99 kWh (i.e., 5.33%) while maintaining the thermal comfort of occupants on an early-summer day and mid-summer day, respectively. The proposed framework provides a general means to realize the efficient distributed control for building HVAC systems. It can be implemented in future Internet of things-based building HVAC control systems. One limitation of the proposed framework is that it is hard to be applied into uncertain control scenarios with measurement uncertainties. Further researches are advised to improve robustness and reliability of distributed control methods considering measurement uncertainties.\n"
  }
}